import express = require("express");
import winston = require("winston");
import bodyParser = require("body-parser");
const _wait = require("wait.for");
const _expressRouter = express.Router();
import {RoutingOption} from "../domain/RoutingOption";
const connectDomain = require('connect-domain');


export default class Server {

    private listener: any;
    private logger: any;
    private exp: any;
    private wait: any;
    private routers: RoutingOption[];
    private expressRouter: any;

    constructor(routers: RoutingOption[] = [],
        listener = express(),
        logger = winston,
        exp = express,
        wait = _wait,
        expressRouter = _expressRouter) {
        this.listener = listener;
        this.logger = logger;
        this.exp = exp;
        this.wait = wait;
        this.routers = routers;
        this.expressRouter = expressRouter;
    }

    public listen(port: number) {
        port = port || 3333;
        
        this.listener.use(bodyParser.json({ limit: "50mb" }));
        this.listener.use(bodyParser.urlencoded({ extended: true, limit: "50mb" }));
        this.listener.use((req: any, res: any, next: any) => {
            this.wait.launchFiber(next);
        });

        this.routers.forEach((router: RoutingOption) => {
            const folder = router.root;
            const routing = router.routing;
            routing.fillRoutes(this.expressRouter, this.getHandlers(routing));
            this.listener.use(folder, this.expressRouter);
        });

        this.listener.use((err: any, req: any, res: any, next: any) => {
            this.logger.info(err);
            res.status(err.statusCode).send(JSON.stringify(err));
            next();
        });

        this.listener.listen(port);
        
        this.logger.info("---", "URL SHORTENER IS RUNNING ON", port, "---");
    }

    private getHandlers(routing: any) {
        const handler = routing.handlers();
        Object.keys(handler).map((key: any) => {
            const fn = handler[key];
            handler[key] = (req: any, res: any) => res.send(JSON.stringify(fn(req, res)));
        });

        return handler;
    }
}

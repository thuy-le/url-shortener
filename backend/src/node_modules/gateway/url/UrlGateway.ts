import { ObjectNotFoundException } from "domain/Exception";
import {Url, UrlImpl, UrlFromRecord, CreateUrlData} from "domain/url/Url";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
const uuidProvider = require("node-uuid");
import {CrudGateway, MakeCrudGateway} from "gateway/CrudGateway";


export function MakeUrlGateway(schema?: any, wait?: any, crud?: CrudGateway<Url>) {
    return new UrlGateway(schema || UrlImpl.SCHEMA, wait || WaitFor, 
    crud || MakeCrudGateway(schema || UrlImpl.SCHEMA, UrlFromRecord));
}

export class UrlGateway {

    private schema: any;
    private wait: any;
    private crud: CrudGateway<Url>;

    constructor(schema: any, wait: any, crud: CrudGateway<Url>) {
        this.schema = schema;
        this.wait = wait;
        this.crud = crud;
    }

    public create(data: Url): Url {
        return this.crud.create(data);
    }

    public update(data: Url) {
        this.crud.update(data);
    }

    public findById(id: number): Url {
        const record = this.wait(this.schema.findOne({id}));
        if (!record) { throw new ObjectNotFoundException("Url cannot be found"); }
        return UrlFromRecord(record);
    }

    public findAll(): Url[] {
        return this.crud.findAll();
    }

    public findByUrl(link: string): Url {
        const record = this.wait(this.schema.findOne({link}));
        return record ? UrlFromRecord(record) : null;
    }

    public latestElement(): number {
        const records = this.wait(this.schema.find({}, {}, {sort: {id: -1}, limit: 1}));
        return records.length > 0 ? UrlFromRecord(records[0]).getId() : 0;
    }

}
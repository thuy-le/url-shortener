import WaitFor from "framework/WaitFor";
import {Entity} from "domain/Entity";
import {ObjectNotFoundException} from "domain/Exception";


export interface CrudGateway<T extends Entity> {
    create(object: T): T;
    update(object: T): T;
    deleteById(id: string): void;
    findAll(): T[];
    find(filter: any): T[]; 
    findOneById(id: string): T;
    findOne(filter: any): T;           
}

export function MakeCrudGateway<T extends Entity>(schema: any, fromActiveRecord: (record: any) => T, wait?: any): CrudGateway<T> {
    return new CrudGatewayImpl<T>(schema, fromActiveRecord, wait || WaitFor);
}

class CrudGatewayImpl<T extends Entity> implements CrudGateway<T> {

    private wait: any;
    private schema: any;
    private fromActiveRecord: (record: any) => T;

    constructor(schema: any, fromActiveRecord: (record: any) => T, wait: any) {
        this.wait = wait;
        this.fromActiveRecord = fromActiveRecord;
        this.schema = schema;
    }

    create(object: T) {
        return <T>this.wait(new Promise((resolve: any, reject: any) => {
            object.record.save(function(err, record){
                if(err){
                    reject(err);
                }else{
                    resolve(object);
                }
            });
        }));
    }

    update(object: T) {
        const dto = object.toJSON();        
        return <T>this.wait(new Promise((resolve: any, reject: any) => {
            this.schema.update({ id: object.getId() }, { $set: dto}, function(err) {
                err ? reject(err) : resolve(object);
            });
        }));
    }

    deleteById(id: string) {
        this.wait(new Promise((resolve: any, reject: any) => {
            this.schema.remove({id: id}, (err: any) => {
                if (err) {
                    reject(err);
                } else resolve();
            });
        }));
    }

    findAll() {
        return this.wait(this.schema.find({})).map((r: any) => this.fromActiveRecord(r));
    }

    findOneById(id: string) {
        return this.fromActiveRecord(this.wait(this.schema.findOne({id})));
    }

    find(filter: any) {
        return this.wait(this.schema.find(filter)).map((r: any) => this.fromActiveRecord(r));
    }

    findOne(filter: any) {
        const record = this.wait(this.schema.findOne(filter));
        if (!record) { throw new ObjectNotFoundException("Object not exist"); }
        return this.fromActiveRecord(record);
    }

}

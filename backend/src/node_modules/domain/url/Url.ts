const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const uuidProvider = require("node-uuid");
import {Entity} from "domain/Entity";
import {InvalidArgumentException} from "domain/Exception";



const URL_REGEX = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:?#[\]@!\$&'\(\)\*\+,;=.]+$/g
const alphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
const base = alphabet.length;

export class ValidUrlString {
    private _value: string;

    constructor(_value: string) {
        if (!_value || _value.trim().length <= 0) {
            throw new InvalidArgumentException("Inputted string cannot be empty");
        }

        if (!URL_REGEX.test(_value)) {
            throw new InvalidArgumentException("Inputted string is not a valid link");
        }

        this._value = _value;
    }

    get value(): string {
        return this._value;
    }

}

export function EncodeId(num: number): string {
    var encoded = '';
    while (num) {
        var remainder = num % base;
        num = Math.floor(num / base);
        encoded = alphabet[remainder].toString() + encoded;
    }
    return encoded;
}

export function DecodeId(shortened: string): number {
    var decoded = 0;
    while (shortened){
        var index = alphabet.indexOf(shortened[0]);
        var power = shortened.length - 1;
        decoded += index * (Math.pow(base, power));
        shortened = shortened.substring(1);
    }
    return decoded;
}

export interface CreateUrlData {
    link: string;
    count?: number;
}

export interface Url extends Entity {
    increase(): void;
}

export function UrlFromRecord(record: any): Url {
    return new UrlImpl(record);
}

export interface UrlDBRecord {
    id: number;
    link: string;
    count: number;
}

export function CreateUrl(data: CreateUrlData, id): Url {
    data.link = (new ValidUrlString(data.link)).value;    
    return new UrlImpl(new UrlImpl.SCHEMA({
        id,
        link: data.link,
        count: data.count || 0,
    }));
}

export class UrlImpl implements Url {

    private _record: UrlDBRecord;

    constructor(record: UrlDBRecord) {
        this._record = record;
    }

    get record(): any {
        return this._record;
    }

    public static SCHEMA = mongoose.model('UrlEntity', new Schema({
        id: { type: Number, required: true, unique: true },
        link: { type: String },
        count: { type: Number, default: 0 },
    }, { collection: 'UrlEntity' }));

    public toJSON() {        
        return {
            id: this.record.id,
            link: this.record.link,
            count: this.record.count,
            shortened: EncodeId(this.record.id),
        };
    }

    public getId(): number {
        return this.record.id;
    }

    public increase(): void {
        this.record.count = this.record.count + 1;
    }
}
